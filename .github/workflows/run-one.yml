name: run-one

on:
  workflow_call:
    inputs:
      compiler:
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        mode:
          - name: opt
            flags: "FFLAGS_OPT=1"
          - name: dbg
            flags: "FFLAGS_DEBUG_MAX=1 FFLAGS_OPT=0"
          - name: opt-omp
            flags: "FFLAGS_OPT=1 OPENMP=1 LIBS+=-lfftw3_threads"
      fail-fast: false # ensures that jobs run in parallel
    env:
      SKIP_BUILD: ${{ inputs.compiler != 'GNU' && matrix.mode.name == 'opt-omp' && false }} # skipped combinations (disabled)
    name: build-${{ matrix.mode.name }}
    steps:
    - name: Checkout code
      if: ${{ env.SKIP_BUILD != 'true' }}
      uses: actions/checkout@v4
      with:
        submodules: true
    - name: Set up the environment and get packages
      if: ${{ env.SKIP_BUILD != 'true' }}
      uses: ./.github/actions/build
      with:
        name: ${{ inputs.compiler }}-${{ matrix.mode.name }}
        compiler: ${{ inputs.compiler }}
        compiler_flags: ${{ matrix.mode.flags }}
        no-rebuild: false

  test:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        mode:
          - name: opt
            flags: "FFLAGS_OPT=1"
          - name: dbg
            flags: "FFLAGS_DEBUG_MAX=1 FFLAGS_OPT=0"
        test-name: [lid_driven_cavity,differentially_heated_cavity]
      fail-fast: false # ensures that jobs run in parallel
    name: test-${{ matrix.mode.name }}-${{ matrix.test-name }}
    env:
      SKIP_RUN: ${{ (matrix.mode.name == 'opt' && inputs.compiler == 'INTEL') || (matrix.mode.name == 'dbg' && inputs.compiler == 'NVIDIA') }} # skipped combinations
    steps:
    - name: Display skipped combinations
      if: ${{ env.SKIP_RUN == 'true' }}
      run: |
        echo "INFO: Skipping the "${{ inputs.compiler }}" with mode "${{ matrix.mode.name }}
    - name: Checkout code
      if: ${{ env.SKIP_RUN != 'true' }}
      uses: actions/checkout@v4
      with:
        submodules: false
    - name: Set up the environment and get packages
      if: ${{ env.SKIP_RUN != 'true' }}
      uses: ./.github/actions/build
      with:
        name: ${{ inputs.compiler }}-${{ matrix.mode.name }}
        compiler: ${{ inputs.compiler }}
        compiler_flags: ${{ matrix.mode.flags }}
        no-rebuild: true
    - name: Get Python
      if: ${{ env.SKIP_RUN != 'true' }}
      uses: actions/setup-python@v2
      with:
        python-version: 3.13
    - name: Get Python packages for testing
      if: ${{ env.SKIP_RUN != 'true' }}
      shell: bash  # specify the shell explicitly
      run: |
        python -m pip install --upgrade pip
        pip install numpy pytest
    - name: Run the test
      if: ${{ env.SKIP_RUN != 'true' }}
      shell: bash  # specify the shell explicitly
      run: |
           source .github/actions/build/scripts/setenv-${{ inputs.compiler }}.sh
           chmod +x ./run/cans
           cd tests/${{ matrix.test-name }}
           bash ./testit.sh
    - name: Upload log files
      if: ${{ env.SKIP_RUN != 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: logs-${{ inputs.compiler }}-${{ matrix.mode.name }}-${{ matrix.test-name }}
        path: run/*log
    - name: Print log(s)
      if: ${{ env.SKIP_RUN != 'true' }}
      shell: bash  # specify the shell explicitly
      run: |
           for f in $(ls run/*.log)
           do
             echo "Printing log file $f"
             cat $f
           done
